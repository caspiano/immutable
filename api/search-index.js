crystal_doc_search_index_callback({"repository_name":"github.com/lucaong/immutable","body":"[![Build Status](https://travis-ci.org/lucaong/immutable.svg?branch=master)](https://travis-ci.org/lucaong/immutable)\n\n# Immutable\n\nEfficient, thread-safe immutable data structures for Crystal.\n\nWhenever an `Immutable` data structure is \"modified\", the original remains\nunchanged and a modified copy is returned. However, the copy is efficient due to\nstructural sharing. This makes `Immutable` data structures inherently\nthread-safe, garbage collector friendly and performant.\n\nAt the moment, `Immutable` implements the following persistent data structures:\n\n  - `Immutable::Vector`: array-like ordered, integer-indexed collection\n  implementing efficient append, pop, update and lookup operations\n  - `Immutable::Map`: hash-like unordered key-value collection implementing\n  efficient lookup and update operations\n\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  immutable:\n    github: lucaong/immutable\n```\n\n\n## Usage\n\nFor a list of all classes and methods refer to the [API documentation](http://lucaong.github.io/immutable/api/)\n\nTo use the immutable collections, require `immutable` in your code:\n\n```crystal\nrequire \"immutable\"\n```\n\n### Vector ([API docs](http://lucaong.github.io/immutable/api/Immutable/Vector.html))\n\n```crystal\n# Vector behaves mostly like an Array:\nvector = Immutable::Vector[1, 2, 3, 4, 5]  # => Vector [1, 2, 3, 4, 5]\nvector[0]                                  # => 1\nvector[-1]                                 # => 5\nvector.size                                # => 5\nvector.each { |elem| puts elem }\n\n# Updating a Vector always returns a modified copy:\nvector2 = vector.set(2, 0)                 # => Vector [1, 2, 0, 4, 5]\nvector2 = vector2.push(42)                 # => Vector [1, 2, 0, 4, 5, 42]\n\n# The original vector is unchanged:\nvector                                     # => Vector [1, 2, 3, 4, 5]\n\n# Bulk updates can be made faster by using `transient`:\nvector3 = vector.transient do |v|\n  1000.times { |i| v = v.push(i) }\nend\n```\n\n### Map ([API docs](http://lucaong.github.io/immutable/api/Immutable/Map.html))\n\n```crystal\n# Map behaves mostly like a Hash:\nmap = Immutable::Map[{:a => 1, :b => 2 }]  # => Map {:a => 1, :b => 2}\nmap[:a]                                  # => 1\n\n# Updating a Map always returns a modified copy:\nmap2 = map.set(:c, 3)                      # => Map {:a => 1, :b => 2, :c => 3}\nmap2 = map2.delete(:b)                     # => Map {:a => 1, :c => 3}\n\n# The original map in unchanged:\nmap                                        # => Map {:a => 1, :b => 2}\n\n# Bulk updates can be made faster by using `transient`:\nmap3 = Immutable::Map(String, Int32)[]\nmap3 = map3.transient do |m|\n  1000.times { |i| m = m.set(i.to_s, i) }\nend\n```\n\n### Nested structures\n\n```crystal\n# Nested arrays/hashes can be turned into immutable versions with the `.from`\n# method:\n\nnested = Immutable.from({:name => \"Ada\", :colors => [:blue, :green, :red] })\nnested # => Map {:name => \"Ada\", :colors => Vector [:blue, :green, :red]}\n```\n\n\n## Implementation\n\n`Immutable::Vector` is implemented as a bit-partitioned vector trie with a block\nsize of 32 bits, that guarantees O(Log32) lookups and updates, which is\neffectively constant time for practical purposes. Due to tail optimization,\nappends and pop are O(1) 31 times out of 32, and O(Log32) 1/32 of the times.\n\n`Immutable::Map` uses a bit-partitioned hash trie with a block size of 32 bits,\nthat also guarantees O(Log32) lookups and updates.\n\n\n## Contributing\n\n1. Fork it ( https://github.com/lucaong/immutable/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n\n## Contributors\n\n- [lucaong](https://github.com/lucaong) Luca Ongaro - creator, maintainer\n\n\n## Acknowledgement\n\nAlthough not a port, this project takes inspiration from similar libraries and\npersistent data structure implementations like:\n\n  - [Clojure persistent collections](http://clojure.org/reference/data_structures)\n  - [The Hamster gem for Ruby](https://github.com/hamstergem/hamster)\n\nWhen researching on the topic of persistent data structure implementation, these\nblog posts have been of great help:\n\n  - [Understanding Clojure's Persistent Vector](http://hypirion.com/musings/understanding-persistent-vector-pt-1) (also [Part 2](http://hypirion.com/musings/understanding-persistent-vector-pt-2), [Part 3](http://hypirion.com/musings/understanding-persistent-vector-pt-3) and [Understanding Clojure's Transients](http://hypirion.com/musings/understanding-clojure-transients))\n  - [Understanding Clojure's Persistent Hash Map](http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html)\n\nBig thanks to their authors for the great job explaining the internals of these\ndata structures.\n","program":{"html_id":"github.com/lucaong/immutable/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/lucaong/immutable","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable","path":"Immutable.html","kind":"module","full_name":"Immutable","name":"Immutable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"immutable/map/trie.cr","line_number":1,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"},{"filename":"immutable/map.cr","line_number":24,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr"},{"filename":"immutable/vector/trie.cr","line_number":1,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr"},{"filename":"immutable/vector.cr","line_number":33,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr"},{"filename":"immutable/version.cr","line_number":1,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/version.cr"},{"filename":"immutable.cr","line_number":3,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.23\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"from(object)-class-method","html_id":"from(object)-class-method","name":"from","doc":"Recursively traverses the given object and turns hashes into\n`Immutable::Map` and arrays into `Immutable::Vector`","summary":"<p>Recursively traverses the given object and turns hashes into <code><a href=\"Immutable/Map.html\">Immutable::Map</a></code> and arrays into <code><a href=\"Immutable/Vector.html\">Immutable::Vector</a></code></p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"args_string":"(object)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L16","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L16","def":{"name":"from","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case object\nwhen Array\n  Vector.new(object.map do |elem|\n    from(elem)\n  end)\nwhen Hash\n  Map.new(object.map do |k, v|\n    {k, from(v)}\n  end)\nelse\n  object\nend"}},{"id":"map(keyvals:Hash(K,V))forallK,V-class-method","html_id":"map(keyvals:Hash(K,V))forallK,V-class-method","name":"map","doc":"Construct an `Immutable::Map` of the given key-values","summary":"<p>Construct an <code><a href=\"Immutable/Map.html\">Immutable::Map</a></code> of the given key-values</p>","abstract":false,"args":[{"name":"keyvals","doc":null,"default_value":"","external_name":"keyvals","restriction":"Hash(K, V)"}],"args_string":"(keyvals : Hash(K, V)) forall K, V","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L10","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L10","def":{"name":"map","args":[{"name":"keyvals","doc":null,"default_value":"","external_name":"keyvals","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Map.new(keyvals)"}},{"id":"vector(elements:Array(T))forallT-class-method","html_id":"vector(elements:Array(T))forallT-class-method","name":"vector","doc":"Construct an `Immutable::Vector` of the given elements","summary":"<p>Construct an <code><a href=\"Immutable/Vector.html\">Immutable::Vector</a></code> of the given elements</p>","abstract":false,"args":[{"name":"elements","doc":null,"default_value":"","external_name":"elements","restriction":"Array(T)"}],"args_string":"(elements : Array(T)) forall T","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L5","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable.cr#L5","def":{"name":"vector","args":[{"name":"elements","doc":null,"default_value":"","external_name":"elements","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Vector.new(elements)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Map","path":"Immutable/Map.html","kind":"class","full_name":"Immutable::Map(K, V)","name":"Map","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map/trie.cr","line_number":2,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"},{"filename":"immutable/map.cr","line_number":25,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/lucaong/immutable/Immutable/Map/Transient","kind":"class","full_name":"Immutable::Map::Transient(K, V)","name":"Transient"}],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable","kind":"module","full_name":"Immutable","name":"Immutable"},"doc":null,"summary":null,"class_methods":[{"id":"[](hash:Hash(K,V)={}ofK=>V)-class-method","html_id":"[](hash:Hash(K,V)={}ofK=&gt;V)-class-method","name":"[]","doc":"Creates a map with the given key-values\n\n```\nm = Immutable::Map[{:a => 123, :b => 321}] # Map {:a => 123, :b => 321}\n```","summary":"<p>Creates a map with the given key-values</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V) = {} <span class=\"k\">of</span> <span class=\"t\">K</span> => <span class=\"t\">V</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L77","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L77","def":{"name":"[]","args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(hash)"}}],"constructors":[{"id":"new(hash:Hash(K,V)={}ofK=>V)-class-method","html_id":"new(hash:Hash(K,V)={}ofK=&gt;V)-class-method","name":"new","doc":"Creates a map with the given key-values\n\n```\nm = Immutable::Map.new({:a => 1, :b => true}) # Map {:a => 1, :b => true}\n```","summary":"<p>Creates a map with the given key-values</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V) = {} <span class=\"k\">of</span> <span class=\"t\">K</span> => <span class=\"t\">V</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L36","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L36","def":{"name":"new","args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Map(K, V).allocate\n_.initialize(hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(hash:Hash(K,V)={}ofK=>V,&block:K->V)-class-method","html_id":"new(hash:Hash(K,V)={}ofK=&gt;V,&amp;block:K-&gt;V)-class-method","name":"new","doc":"Creates a map with the given key-values. When getting a key-value that is\nnot in the map, the given block is executed passing the key, and the\nreturn value is returned.\n\n```\nm = Immutable::Map.new({:a => 123, :b => 321 }) # Map {:a => 123, :b => 321}\n```","summary":"<p>Creates a map with the given key-values.</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V) = {} <span class=\"k\">of</span> <span class=\"t\">K</span> => <span class=\"t\">V</span>, &block : K -> V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L51","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L51","def":{"name":"new","args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(K -> V)"},"return_type":"","visibility":"Public","body":"_ = Map(K, V).allocate\n_.initialize(hash, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(e:Enumerable(::Tuple(_,_)))-class-method","html_id":"new(e:Enumerable(::Tuple(_,_)))-class-method","name":"new","doc":"Creates a map with the given key-values.\n\n```\nm = Immutable::Map.new([{:a, 123}, {:b, 321}]) # Map {:a => 123, :b => 321}\n```","summary":"<p>Creates a map with the given key-values.</p>","abstract":false,"args":[{"name":"e","doc":null,"default_value":"","external_name":"e","restriction":"Enumerable(::Tuple(_, _))"}],"args_string":"(e : Enumerable(::Tuple(_, _)))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L68","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L68","def":{"name":"new","args":[{"name":"e","doc":null,"default_value":"","external_name":"e","restriction":"Enumerable(::Tuple(_, _))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Transient.new(e)).persist!"}}],"instance_methods":[{"id":"==(other:Map)-instance-method","html_id":"==(other:Map)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Map"}],"args_string":"(other : Map)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L358","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L358","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Map"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @trie.same?(other.trie)\n  return true\nend\nif size == other.size\nelse\n  return false\nend\nall? do |kv|\n  entry = other.trie.find_entry(kv[0])\n  entry && (entry.value == kv[1])\nend\n"}},{"id":"[](key:K)-instance-method","html_id":"[](key:K)-instance-method","name":"[]","doc":"Returns the value associated with the given key, if existing, else raises\n`KeyError`. See also `fetch`","summary":"<p>Returns the value associated with the given key, if existing, else raises <code>KeyError</code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L133","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L133","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fetch(key)"}},{"id":"[]?(key:K)-instance-method","html_id":"[]?(key:K)-instance-method","name":"[]?","doc":"Returns the value associated with the given key, if existing, else nil","summary":"<p>Returns the value associated with the given key, if existing, else nil</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L138","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L138","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fetch(key, nil)"}},{"id":"delete(key:K)-instance-method","html_id":"delete(key:K)-instance-method","name":"delete","doc":"Returns a modified copy of the map with the key-value pair removed. If the\nkey is not existing, it raises `KeyError`\n\n```\nm  = Immutable::Map[{:foo => 123, :bar => 321 }]\nm2 = m.delete(:bar) # => Map {:foo => 123}\nm                   # => Map {:foo => 123, bar: 321}\n```","summary":"<p>Returns a modified copy of the map with the key-value pair removed.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L162","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L162","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Map.new(@trie.delete(key), @block)"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Returns an iterator over the map entries, returning a `Tuple` of the key\nand value. The order of iteration is not specified.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\", \"baz\" => \"qux\"}]\niterator = map.each\n\nentry = iterator.next\nentry[0] # => \"foo\"\nentry[1] # => \"bar\"\n\nentry = iterator.next\nentry[0] # => \"baz\"\nentry[1] # => \"qux\"\n```","summary":"<p>Returns an iterator over the map entries, returning a <code>Tuple</code> of the key and value.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L238","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L238","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.each"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"Calls the given block for each key-value and passes in a tuple of key and\nvalue. The order of iteration is not specified.\n\n```\nm = Immutable::Map[{\"foo\" => \"bar\"}]\nm.each do |keyval|\n  keyval[0] # => \"foo\"\n  keyval[1] # => \"bar\"\nend\n```","summary":"<p>Calls the given block for each key-value and passes in a tuple of key and value.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L218","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L218","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.each do |keyval|\n  yield keyval\nend\nself\n"}},{"id":"each_key-instance-method","html_id":"each_key-instance-method","name":"each_key","doc":"Returns an iterator over the map keys. The order is not guaranteed.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\", \"baz\" => \"qux\"}]\niterator = map.each_key\n\nkey = iterator.next\nkey # => \"foo\"\n\nkey = iterator.next\nkey # => \"baz\"\n```","summary":"<p>Returns an iterator over the map keys.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L268","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L268","def":{"name":"each_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"each.map(&.first)"}},{"id":"each_key(&block:K->)-instance-method","html_id":"each_key(&amp;block:K-&gt;)-instance-method","name":"each_key","doc":"Calls the given block for each key-value pair and passes in the key.\n\n```\nm = Immutable::Map[{\"foo\" => \"bar\"}]\nm.each_key do |key|\n  key # => \"foo\"\nend\n```","summary":"<p>Calls the given block for each key-value pair and passes in the key.</p>","abstract":false,"args":[],"args_string":"(&block : K -> )","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L250","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L250","def":{"name":"each_key","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(K -> )"},"return_type":"","visibility":"Public","body":"each do |keyval|\n  block.call(keyval.first)\nend"}},{"id":"each_value-instance-method","html_id":"each_value-instance-method","name":"each_value","doc":"Returns an iterator over the map values. The order is not specified.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\", \"baz\" => \"qux\"}]\niterator = map.each_value\n\nval = iterator.next\nval # => \"bar\"\n\nval = iterator.next\nval # => \"qux\"\n```","summary":"<p>Returns an iterator over the map values.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L299","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L299","def":{"name":"each_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"each.map(&.last)"}},{"id":"each_value(&block:V->)-instance-method","html_id":"each_value(&amp;block:V-&gt;)-instance-method","name":"each_value","doc":"Calls the given block for each key-value pair and passes in the value.\n\n```\nm = Immutable::Map[{\"foo\" => \"bar\"}]\nm.each_value do |val|\n  val # => \"bar\"\nend\n```","summary":"<p>Calls the given block for each key-value pair and passes in the value.</p>","abstract":false,"args":[],"args_string":"(&block : V -> )","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L281","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L281","def":{"name":"each_value","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(V -> )"},"return_type":"","visibility":"Public","body":"each do |keyval|\n  block.call(keyval.last)\nend"}},{"id":"fetch(key:K,&block:K->_)-instance-method","html_id":"fetch(key:K,&amp;block:K-&gt;_)-instance-method","name":"fetch","doc":"Returns the value associated with the given key, if existing, else\nexecutes the given block and returns its value","summary":"<p>Returns the value associated with the given key, if existing, else executes the given block and returns its value</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K, &block : K -> _)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L121","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L121","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(K -> _)"},"return_type":"","visibility":"Public","body":"@trie.fetch(key, &block)"}},{"id":"fetch(key:K,default)-instance-method","html_id":"fetch(key:K,default)-instance-method","name":"fetch","doc":"Returns the value associated with the given key, if existing, else\nit returns the provided default value","summary":"<p>Returns the value associated with the given key, if existing, else it returns the provided default value</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(key : K, default)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L127","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L127","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fetch(key) do\n  default\nend"}},{"id":"fetch(key:K)-instance-method","html_id":"fetch(key:K)-instance-method","name":"fetch","doc":"Returns the value associated with the given key, if existing, else raises\n`KeyError`","summary":"<p>Returns the value associated with the given key, if existing, else raises <code>KeyError</code></p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L110","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L110","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fetch(key) do\n  if b = @block\n    next b.call(key)\n  end\n  raise(KeyError.new(\"Missing map key: #{key.inspect}\"))\nend"}},{"id":"hash-instance-method","html_id":"hash-instance-method","name":"hash","doc":"See `Object#hash`.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\"}]\nmap.hash # => 63502\n```","summary":"<p>See <code>Object#hash</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L352","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L352","def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reduce(size * 43) do |memo, __arg6|\n  key = __arg6[0]\n  value = __arg6[1]\n  (43 * memo) + (key.hash ^ value.hash)\nend"}},{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends a `String` representation of this object to the given IO object.","summary":"<p>Appends a <code>String</code> representation of this object to the given IO object.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L324","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L324","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s(io)"}},{"id":"keys-instance-method","html_id":"keys-instance-method","name":"keys","doc":"Returns only the keys as an `Array`. The order is not specified.\n\n```\nm = Immutable::Map[{\"foo\" => \"bar\", \"baz\" => \"qux\"}]\nm.keys # => [\"foo\", \"bar\"]\n```","summary":"<p>Returns only the keys as an <code>Array</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L309","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L309","def":{"name":"keys","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"each_key.to_a"}},{"id":"merge(map:Immutable::Map(L,W))forallL,W-instance-method","html_id":"merge(map:Immutable::Map(L,W))forallL,W-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(L, W)"}],"args_string":"(map : Immutable::Map(L, W)) forall L, W","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L204","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L204","def":{"name":"merge","args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(L, W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((Transient(K | L, V | W).new.merge(self)).merge(map)).persist!"}},{"id":"merge(hash:Hash(L,W))forallL,W-instance-method","html_id":"merge(hash:Hash(L,W))forallL,W-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(L, W)"}],"args_string":"(hash : Hash(L, W)) forall L, W","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L200","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L200","def":{"name":"merge","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(L, W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((Transient(K | L, V | W).new.merge(self)).merge(hash)).persist!"}},{"id":"merge(map:Immutable::Map(K,V))-instance-method","html_id":"merge(map:Immutable::Map(K,V))-instance-method","name":"merge","doc":"Returns a new map with the keys and values of this map and the given map\ncombined.\nA value in the given map takes precedence over the one in this map.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\"}]\nmerged = map.merge(Immutable::Map[{\"baz\" => \"qux\"}])\nmerged # => Map {\"foo\" => \"bar\", \"baz\" => \"qux\"}\nmap    # => Map {\"foo\" => \"bar\"}\n```","summary":"<p>Returns a new map with the keys and values of this map and the given map combined.</p>","abstract":false,"args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(K, V)"}],"args_string":"(map : Immutable::Map(K, V))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L193","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L193","def":{"name":"merge","args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"trie = map.reduce(@trie) do |trie, __arg3|\n  key = __arg3[0]\n  value = __arg3[1]\n  trie.set(key, value)\nend\nMap.new(trie, @block)\n"}},{"id":"merge(hash:Hash(K,V))-instance-method","html_id":"merge(hash:Hash(K,V))-instance-method","name":"merge","doc":"Returns a new map with the keys and values of this map and the given hash\ncombined.\nA value in the given hash takes precedence over the one in this map.\n\n```\nmap = Immutable::Map[{\"foo\" => \"bar\"}]\nmerged = map.merge({\"baz\" => \"qux\"})\nmerged # => Map {\"foo\" => \"bar\", \"baz\" => \"qux\"}\nmap    # => Map {\"foo\" => \"bar\"}\n```","summary":"<p>Returns a new map with the keys and values of this map and the given hash combined.</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L176","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L176","def":{"name":"merge","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"trie = hash.reduce(@trie) do |trie, __arg2|\n  key = __arg2[0]\n  value = __arg2[1]\n  trie.set(key, value)\nend\nMap.new(trie, @block)\n"}},{"id":"set(key:K,value:V)-instance-method","html_id":"set(key:K,value:V)-instance-method","name":"set","doc":"Returns a modified copy of the map where key is associated to value\n\n```\nm  = Immutable::Map[{:foo => 123}]\nm2 = m.set(:bar, 321) # => Map {:foo => 123, :bar => 321}\nm                     # => Map {:foo => 123}\n```","summary":"<p>Returns a modified copy of the map where key is associated to value</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L149","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L149","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Map.new(@trie.set(key, value), @block)"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of key-value pairs in the map","summary":"<p>Returns the number of key-value pairs in the map</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L104","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L104","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.size"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":"Returns the JSON serialization of this map","summary":"<p>Returns the JSON serialization of this map</p>","abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L336","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L336","def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.object do\n  each do |key, value|\n    json.field(key) do\n      value.to_json(json)\n    end\n  end\nend"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a String representation of this map\nto the given IO object.","summary":"<p>Appends a String representation of this map to the given IO object.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L330","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L330","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"Map \"\nto_h.to_s(io)\n"}},{"id":"transient(&block)-instance-method","html_id":"transient(&amp;block)-instance-method","name":"transient","doc":"Executes the given block passing a transient version of the map, then\nconverts the transient map back to an immutable one and returns it.\n\nThis is useful to perform several updates on a map in an efficient way: as\nthe transient map supports the same API of map, but performs updates in\nplace, avoiding unnecessary object allocations.\n\n```\nmap = Immutable::Map(Int32, Int32).new\nm2 = map.transient do |m|\n  100.times { |i| m = m.set(i, i * 2) }\nend\nm2.size # => 100\n```\n\nNote that, as the transient is mutable, it is not thread-safe.","summary":"<p>Executes the given block passing a transient version of the map, then converts the transient map back to an immutable one and returns it.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L97","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L97","def":{"name":"transient","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"t = Transient.new(@trie, @block)\nyield t\nt.persist!\n"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":"Returns only the values as an `Array`. The order is not specified.\n\n```\nm = Immutable::Map[{\"foo\" => \"bar\", \"baz\" => \"qux\"}]\nm.values # => [\"bar\", \"qux\"]\n```","summary":"<p>Returns only the values as an <code>Array</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L319","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L319","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"each_value.to_a"}}],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Map/Transient","path":"Immutable/Map/Transient.html","kind":"class","full_name":"Immutable::Map::Transient(K, V)","name":"Transient","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Immutable/Map","kind":"class","full_name":"Immutable::Map","name":"Map"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Immutable/Map","kind":"class","full_name":"Immutable::Map","name":"Map"},{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map.cr","line_number":376,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map","kind":"class","full_name":"Immutable::Map(K, V)","name":"Map"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(hash:Hash(K,V)={}ofK=>V)-class-method","html_id":"new(hash:Hash(K,V)={}ofK=&gt;V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V) = {} <span class=\"k\">of</span> <span class=\"t\">K</span> => <span class=\"t\">V</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L379","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L379","def":{"name":"new","args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Transient(K, V).allocate\n_.initialize(hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(hash:Hash(K,V)={}ofK=>V,&block:K->V)-class-method","html_id":"new(hash:Hash(K,V)={}ofK=&gt;V,&amp;block:K-&gt;V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V) = {} <span class=\"k\">of</span> <span class=\"t\">K</span> => <span class=\"t\">V</span>, &block : K -> V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L387","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L387","def":{"name":"new","args":[{"name":"hash","doc":null,"default_value":"{} of K => V","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(K -> V)"},"return_type":"","visibility":"Public","body":"_ = Transient(K, V).allocate\n_.initialize(hash, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(e:Enumerable(::Tuple(L,W)))forallL,W-class-method","html_id":"new(e:Enumerable(::Tuple(L,W)))forallL,W-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"e","doc":null,"default_value":"","external_name":"e","restriction":"Enumerable(::Tuple(L, W))"}],"args_string":"(e : Enumerable(::Tuple(L, W))) forall L, W","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L400","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L400","def":{"name":"new","args":[{"name":"e","doc":null,"default_value":"","external_name":"e","restriction":"Enumerable(::Tuple(L, W))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"e.reduce(Transient(L, W).new) do |m, __arg9|\n  k = __arg9[0]\n  v = __arg9[1]\n  m.set(k, v)\nend"}}],"instance_methods":[{"id":"delete(key:K)-instance-method","html_id":"delete(key:K)-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L419","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L419","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@trie = @trie.delete!(key, object_id)\nself\n"}},{"id":"merge(hash:Hash(K,V))-instance-method","html_id":"merge(hash:Hash(K,V))-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"}],"args_string":"(hash : Hash(K, V))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L425","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L425","def":{"name":"merge","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@trie = hash.reduce(@trie) do |trie, __arg10|\n  key = __arg10[0]\n  value = __arg10[1]\n  trie.set!(key, value, object_id)\nend\nself\n"}},{"id":"merge(map:Immutable::Map(K,V))-instance-method","html_id":"merge(map:Immutable::Map(K,V))-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(K, V)"}],"args_string":"(map : Immutable::Map(K, V))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L433","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L433","def":{"name":"merge","args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(K, V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@trie = map.reduce(@trie) do |trie, __arg11|\n  key = __arg11[0]\n  value = __arg11[1]\n  trie.set!(key, value, object_id)\nend\nself\n"}},{"id":"merge(hash:Hash(L,W))forallL,W-instance-method","html_id":"merge(hash:Hash(L,W))forallL,W-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(L, W)"}],"args_string":"(hash : Hash(L, W)) forall L, W","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L441","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L441","def":{"name":"merge","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(L, W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n(Transient(K | L, V | W).new.merge(self)).merge(hash)\n"}},{"id":"merge(map:Immutable::Map(L,W))forallL,W-instance-method","html_id":"merge(map:Immutable::Map(L,W))forallL,W-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(L, W)"}],"args_string":"(map : Immutable::Map(L, W)) forall L, W","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L446","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L446","def":{"name":"merge","args":[{"name":"map","doc":null,"default_value":"","external_name":"map","restriction":"Map(L, W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n(Transient(K | L, V | W).new.merge(self)).merge(map)\n"}},{"id":"persist!-instance-method","html_id":"persist!-instance-method","name":"persist!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L406","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L406","def":{"name":"persist!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@valid = false\n@trie.clear_owner!\nMap.new(@trie, @block)\n"}},{"id":"set(key:K,value:V)-instance-method","html_id":"set(key:K,value:V)-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L413","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr#L413","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@trie = @trie.set!(key, value, object_id)\nself\n"}}],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Map/Transient/Invalid","path":"Immutable/Map/Transient/Invalid.html","kind":"class","full_name":"Immutable::Map::Transient::Invalid","name":"Invalid","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map.cr","line_number":457,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map/Transient","kind":"class","full_name":"Immutable::Map::Transient(K, V)","name":"Transient"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie","path":"Immutable/Map/Trie.html","kind":"class","full_name":"Immutable::Map::Trie(K, V)","name":"Trie","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map/trie.cr","line_number":3,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"BITMAP_MASK","name":"BITMAP_MASK","value":"((2_u64 ** BLOCK_SIZE) - 1_u64)","doc":null,"summary":null},{"id":"BITS_PER_LEVEL","name":"BITS_PER_LEVEL","value":"5_u64","doc":null,"summary":null},{"id":"BLOCK_SIZE","name":"BLOCK_SIZE","value":"2_u64 ** BITS_PER_LEVEL","doc":null,"summary":null},{"id":"INDEX_MASK","name":"INDEX_MASK","value":"BLOCK_SIZE - 1_u64","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map","kind":"class","full_name":"Immutable::Map(K, V)","name":"Map"},"doc":null,"summary":null,"class_methods":[{"id":"empty(owner:UInt64?=nil)-class-method","html_id":"empty(owner:UInt64?=nil)-class-method","name":"empty","doc":null,"summary":null,"abstract":false,"args":[{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"args_string":"(owner : UInt64? = <span class=\"n\">nil</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L30","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L30","def":{"name":"empty","args":[{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children = [] of Trie(K, V)\nvalues = Values(K, V).new\nnew(children, values, 0_u32, 0, owner)\n"}}],"constructors":[{"id":"new(children:Array(Immutable::Map::Trie(K,V)),values:Immutable::Map::Trie::Values(K,V),bitmap:UInt64,levels:Int32,owner:UInt64?=nil)-class-method","html_id":"new(children:Array(Immutable::Map::Trie(K,V)),values:Immutable::Map::Trie::Values(K,V),bitmap:UInt64,levels:Int32,owner:UInt64?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":"Array(Trie(K, V))"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Values(K, V)"},{"name":"bitmap","doc":null,"default_value":"","external_name":"bitmap","restriction":"UInt64"},{"name":"levels","doc":null,"default_value":"","external_name":"levels","restriction":"Int32"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"args_string":"(children : Array(Immutable::Map::Trie(K, V)), values : Immutable::Map::Trie::Values(K, V), bitmap : UInt64, levels : Int32, owner : UInt64? = <span class=\"n\">nil</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L20","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L20","def":{"name":"new","args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":"Array(Trie(K, V))"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Values(K, V)"},{"name":"bitmap","doc":null,"default_value":"","external_name":"bitmap","restriction":"UInt64"},{"name":"levels","doc":null,"default_value":"","external_name":"levels","restriction":"Int32"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Trie(K, V).allocate\n_.initialize(children, values, bitmap, levels, owner)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear_owner!-instance-method","html_id":"clear_owner!-instance-method","name":"clear_owner!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L84","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L84","def":{"name":"clear_owner!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@owner = nil\nself\n"}},{"id":"delete(key:K):Immutable::Map::Trie(K,V)-instance-method","html_id":"delete(key:K):Immutable::Map::Trie(K,V)-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Immutable::Map::Trie(K, V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L60","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L60","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(K, V)","visibility":"Public","body":"delete_at_index(key.hash, key)"}},{"id":"delete!(key:K,from:UInt64):Immutable::Map::Trie(K,V)-instance-method","html_id":"delete!(key:K,from:UInt64):Immutable::Map::Trie(K,V)-instance-method","name":"delete!","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"args_string":"(key : K, from : UInt64) : Immutable::Map::Trie(K, V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L64","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L64","def":{"name":"delete!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(K, V)","visibility":"Public","body":"delete_at_index!(key.hash, key, from)"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L68","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L68","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"each.each do |entry|\n  yield entry\nend\nself\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L73","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L73","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children_iter = @children.each.map do |child|\n  child.each.as(Iterator(::Tuple(K, V)))\nend\n@values.each.chain(EntryIterator(K, V).new(children_iter))\n"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L80","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L80","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size == 0"}},{"id":"fetch(key:K,&block:K->_)-instance-method","html_id":"fetch(key:K,&amp;block:K-&gt;_)-instance-method","name":"fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K, &block : K -> _)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L40","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L40","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(K -> _)"},"return_type":"","visibility":"Public","body":"lookup(key.hash) do |hash|\n  hash.fetch(key, &block)\nend"}},{"id":"find_entry(key:K):Immutable::Map::Trie::Entry(K,V)?-instance-method","html_id":"find_entry(key:K):Immutable::Map::Trie::Entry(K,V)?-instance-method","name":"find_entry","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Immutable::Map::Trie::Entry(K, V)?","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L48","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L48","def":{"name":"find_entry","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Entry(K, V) | ::Nil","visibility":"Public","body":"lookup(key.hash) do |hash|\n  hash.find_entry(key)\nend"}},{"id":"get(key:K):V-instance-method","html_id":"get(key:K):V-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L36","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L36","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"lookup(key.hash) do |hash|\n  hash[key]\nend"}},{"id":"has_key?(key:K):Bool-instance-method","html_id":"has_key?(key:K):Bool-instance-method","name":"has_key?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Bool","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L44","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L44","def":{"name":"has_key?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"lookup(key.hash) do |hash|\n  hash.has_key?(key)\nend"}},{"id":"levels-instance-method","html_id":"levels-instance-method","name":"levels","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L11","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L11","def":{"name":"levels","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@levels"}},{"id":"set(key:K,value:V):Immutable::Map::Trie(K,V)-instance-method","html_id":"set(key:K,value:V):Immutable::Map::Trie(K,V)-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : Immutable::Map::Trie(K, V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L52","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L52","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(K, V)","visibility":"Public","body":"set_at_index(key.hash, key, value)"}},{"id":"set!(key:K,value:V,from:UInt64):Immutable::Map::Trie(K,V)-instance-method","html_id":"set!(key:K,value:V,from:UInt64):Immutable::Map::Trie(K,V)-instance-method","name":"set!","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"args_string":"(key : K, value : V, from : UInt64) : Immutable::Map::Trie(K, V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L56","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L56","def":{"name":"set!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(K, V)","visibility":"Public","body":"set_at_index!(key.hash, key, value, from)"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L11","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L11","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size"}}],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie/Entry","path":"Immutable/Map/Trie/Entry.html","kind":"struct","full_name":"Immutable::Map::Trie::Entry(K, V)","name":"Entry","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/lucaong/immutable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map/trie.cr","line_number":231,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie","kind":"class","full_name":"Immutable::Map::Trie(K, V)","name":"Trie"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(key:K,value:V)-class-method","html_id":"new(key:K,value:V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L237","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L237","def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Entry(K, V).allocate\n_.initialize(key, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"key-instance-method","html_id":"key-instance-method","name":"key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L235","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L235","def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L235","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L235","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie/EntryIterator","path":"Immutable/Map/Trie/EntryIterator.html","kind":"class","full_name":"Immutable::Map::Trie::EntryIterator(K, V)","name":"EntryIterator","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map/trie.cr","line_number":316,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/lucaong/immutable/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie","kind":"class","full_name":"Immutable::Map::Trie(K, V)","name":"Trie"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(iterator)-class-method","html_id":"new(iterator)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":""}],"args_string":"(iterator)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L323","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L323","def":{"name":"new","args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = EntryIterator(K, V).allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next:Tuple(K,V)|Stop-instance-method","html_id":"next:Tuple(K,V)|Stop-instance-method","name":"next","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(K, V) | Stop","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L328","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L328","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(K, V) | Stop","visibility":"Public","body":"value = @generator.next\nif value.is_a?(Stop)\n  if @top\n    return stop\n  end\n  @generator = @iterator\n  @top = true\n  self.next\nelse\n  flatten(value)\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie/Values","path":"Immutable/Map/Trie/Values.html","kind":"struct","full_name":"Immutable::Map::Trie::Values(K, V)","name":"Values","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/lucaong/immutable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/map/trie.cr","line_number":241,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Map/Trie","kind":"class","full_name":"Immutable::Map::Trie(K, V)","name":"Trie"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(entries:Array(Immutable::Map::Trie::Entry(K,V)))-class-method","html_id":"new(entries:Array(Immutable::Map::Trie::Entry(K,V)))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"entries","doc":null,"default_value":"","external_name":"entries","restriction":"Array(Entry(K, V))"}],"args_string":"(entries : Array(Immutable::Map::Trie::Entry(K, V)))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L248","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L248","def":{"name":"new","args":[{"name":"entries","doc":null,"default_value":"","external_name":"entries","restriction":"Array(Entry(K, V))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Values(K, V).allocate\n_.initialize(entries)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L244","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L244","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Values(K, V).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"[](key:K):V-instance-method","html_id":"[](key:K):V-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L259","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L259","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"fetch(key) do\n  raise(KeyError.new)\nend"}},{"id":"[]=(key:K,value:V)-instance-method","html_id":"[]=(key:K,value:V)-instance-method","name":"[]=","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L300","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L300","def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@entries.each_with_index do |entry, i|\n  if entry.key == key\n    return @entries[i] = Entry(K, V).new(key, value)\n  end\nend\n@entries.push(Entry(K, V).new(key, value))\nvalue\n"}},{"id":"[]?(key:K):V?-instance-method","html_id":"[]?(key:K):V?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V?","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L263","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L263","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V | ::Nil","visibility":"Public","body":"fetch(key) do\n  nil\nend"}},{"id":"delete(key:K):V-instance-method","html_id":"delete(key:K):V-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L278","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L278","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"@entries.each_with_index do |entry, i|\n  if entry.key == key\n    @entries.delete_at(i)\n    return entry.value\n  end\nend\nraise(KeyError.new)\n"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L311","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L311","def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Values(K, V).new(@entries.dup)"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L255","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L255","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@entries.map do |entry|\n  {entry.key, entry.value}\nend.each"}},{"id":"fetch(key:K,&block)-instance-method","html_id":"fetch(key:K,&amp;block)-instance-method","name":"fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K, &block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L267","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L267","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@entries.each do |entry|\n  if entry.key == key\n    return entry.value\n  end\nend\nyield key\n"}},{"id":"fetch(key:K,default)-instance-method","html_id":"fetch(key:K,default)-instance-method","name":"fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(key : K, default)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L274","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L274","def":{"name":"fetch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fetch(key) do\n  default\nend"}},{"id":"find_entry(key:K):Immutable::Map::Trie::Entry(K,V)?-instance-method","html_id":"find_entry(key:K):Immutable::Map::Trie::Entry(K,V)?-instance-method","name":"find_entry","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Immutable::Map::Trie::Entry(K, V)?","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L288","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L288","def":{"name":"find_entry","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Entry(K, V) | ::Nil","visibility":"Public","body":"@entries.each do |entry|\n  if entry.key == key\n    return entry\n  end\nend\nnil\n"}},{"id":"has_key?(key:K):Bool-instance-method","html_id":"has_key?(key:K):Bool-instance-method","name":"has_key?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Bool","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L295","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L295","def":{"name":"has_key?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if find_entry(key)\n  return true\nend\nfalse\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L251","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/map/trie.cr#L251","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@entries.size"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/lucaong/immutable/Immutable/Vector","path":"Immutable/Vector.html","kind":"class","full_name":"Immutable::Vector(T)","name":"Vector","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/lucaong/immutable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/vector/trie.cr","line_number":2,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr"},{"filename":"immutable/vector.cr","line_number":34,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/lucaong/immutable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/lucaong/immutable/Immutable/Vector/Transient","kind":"class","full_name":"Immutable::Vector::Transient(T)","name":"Transient"}],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable","kind":"module","full_name":"Immutable","name":"Immutable"},"doc":null,"summary":null,"class_methods":[{"id":"[](*elems:T)-class-method","html_id":"[](*elems:T)-class-method","name":"[]","doc":"Creates a new vector from the given arguments\n\n```\nvec = Immutable::Vector[1, 2, 3, 4]","summary":"<p>Creates a new vector from the given arguments</p>","abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"T"}],"args_string":"(*elems : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L51","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L51","def":{"name":"[]","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (elems.size <= Trie::BLOCK_SIZE)\n  new(Trie(T).empty, elems.to_a)\nelse\n  new(elems.to_a)\nend"}},{"id":"of(*elems:T)-class-method","html_id":"of(*elems:T)-class-method","name":"of","doc":"Alias for `Vector.[]`","summary":"<p>Alias for <code><a href=\"../Immutable/Vector.html#%5B%5D%28%2Aelems%3AT%29-class-method\">Vector.[]</a></code></p>","abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"T"}],"args_string":"(*elems : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L43","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L43","def":{"name":"of","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[*elems]"}}],"constructors":[{"id":"new(elems:Array(T))-class-method","html_id":"new(elems:Array(T))-class-method","name":"new","doc":"Creates a vector filled with the elements from the given array, in the\nsame position.","summary":"<p>Creates a vector filled with the elements from the given array, in the same position.</p>","abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"args_string":"(elems : Array(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L71","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L71","def":{"name":"new","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Vector(T).allocate\n_.initialize(elems)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Creates a new empty vector","summary":"<p>Creates a new empty vector</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L60","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L60","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Vector(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"&(other:Immutable::Vector(_))-instance-method","html_id":"&amp;(other:Immutable::Vector(_))-instance-method","name":"&","doc":"Set intersection: returns a new array containing elements common to the two\nvectors, excluding any duplicates. The order is preserved from the original\nvector.\n\n```\nv1 = Immutable::Vector[1, 1, 3, 5]\nv2 = Immutable::Vector[1, 2, 3]\nv1 & v2 # => Vector [1, 3]\n```","summary":"<p>Set intersection: returns a new array containing elements common to the two vectors, excluding any duplicates.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(_)"}],"args_string":"(other : Immutable::Vector(_))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L435","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L435","def":{"name":"&","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(_)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if empty? || other.empty?\n  return Vector(T).new\nend\nset = other.to_lookup_set\nintersection = self.select do |elem|\n  in_set = set.includes?(elem)\n  set.delete(elem)\n  in_set\nend\nVector(T).new(intersection)\n"}},{"id":"+(other:Immutable::Vector(U))forallU-instance-method","html_id":"+(other:Immutable::Vector(U))forallU-instance-method","name":"+","doc":"Concatenation. Returns a new vector built by concatenating self with\nother. The type of the new vector is the union of the types of self and\nother.\n\n```\nv1 = Immutable::Vector[1, 2]\nv2 = Immutable::Vector[2, 3]\nv3 = Immutable::Vector[\"a\"]\nv1 + v2 # => Vector [1, 2, 2, 3]\nv1 + v3 # => Vector [1, 2, \"a\"]\n```","summary":"<p>Concatenation.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(U)"}],"args_string":"(other : Immutable::Vector(U)) forall U","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L398","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L398","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"trie = @trie.as(Trie(T | U))\ntail = @tail.as(Array(T | U))\nother.each_slice(Trie::BLOCK_SIZE) do |slice|\n  leaf_tail = (tail + slice)\n  trie = trie.push_leaf!(leaf_tail.first(Trie::BLOCK_SIZE), object_id)\n  tail = leaf_tail.skip(Trie::BLOCK_SIZE)\nend\nVector.new(trie.clear_owner!, tail)\n"}},{"id":"-(other:Immutable::Vector(_))-instance-method","html_id":"-(other:Immutable::Vector(_))-instance-method","name":"-","doc":"Difference. Returns a new vector that is a copy of the original, removing\nany items that appear in `other`. The order of the original vector is\npreserved.\n\n```\nv1 = Immutable::Vector[1, 2, 3]\nv2 = Immutable::Vector[2, 1]\nv1 - v2 => Vector [3]\n```","summary":"<p>Difference.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(_)"}],"args_string":"(other : Immutable::Vector(_))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L418","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L418","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(_)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = other.to_lookup_set\nelems = reject do |elem|\n  set.includes?(elem)\nend\nVector(T).new(elems)\n"}},{"id":"<<(elem:T)-instance-method","html_id":"&lt;&lt;(elem:T)-instance-method","name":"<<","doc":"Alias for `push`","summary":"<p>Alias for <code><a href=\"../Immutable/Vector.html#push%28elem%3AT%29-instance-method\">#push</a></code></p>","abstract":false,"args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"args_string":"(elem : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L200","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L200","def":{"name":"<<","args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"push(elem)"}},{"id":"(other:Vector)-instance-method","html_id":"(other:Vector)-instance-method","name":"<=>","doc":"Combined comparison operator. Returns 0 if the first vector equals the\nsecond, 1 if the first is greater than the second and -1 if the first is\nsmaller than the second.\n\nIt compares the elements of both vectors in the same position using the\n`<=>` operator, as soon as one of such comparisons returns a non zero\nvalue, that result is the return value of the whole comparison.\n\nIf all elements are equal, the comparison is based on the size of the\nvectors.\n\n```\nImmutable::Vector[8] <=> Immutable::Vector[1, 2, 3] # => 1\nImmutable::Vector[2] <=> Immutable::Vector[4, 2, 3] # => -1\nImmutable::Vector[1, 2] <=> Immutable::Vector[1, 2] # => 0\n```","summary":"<p>Combined comparison operator.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"args_string":"(other : Vector)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L368","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L368","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"min_size = Math.min(size, other.size)\n(each.zip(other.each)).each do |tuple|\n  n = tuple.first <=> tuple.last\n  if n != 0\n    return n\n  end\nend\nsize <=> other.size\n"}},{"id":"==(other:Vector)-instance-method","html_id":"==(other:Vector)-instance-method","name":"==","doc":"Equality. Returns true if it is passed a Vector and `equals?`\nreturns true for both vectors, the caller and the argument.\n\n```\nvec = Immutable::Vector[1, 2, 3]\nvec == Immutable::Vector[1, 2, 3] # => true\nvec == Immutable::Vector[2, 3]    # => false\n```","summary":"<p>Equality.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"args_string":"(other : Vector)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L342","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L342","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (@trie.same?(other.trie)) && (@tail == other.tail)\n  return true\nend\nequals?(other) do |x, y|\n  x == y\nend\n"}},{"id":"[](i:Int)-instance-method","html_id":"[](i:Int)-instance-method","name":"[]","doc":"Returns the element at the given index.\n\nNegative indices can be used to start counting from the end of the vector.\nRaises `IndexError` if trying to access an element outside the vector's range.\n\n```\nvec = Immutable::Vector['a', 'b', 'c']\nvec[0]  # => 'a'\nvec[2]  # => 'c'\nvec[-1] # => 'c'\nvec[-2] # => 'b'\n\nvec[3]  # raises IndexError\nvec[-4] # raises IndexError\n```","summary":"<p>Returns the element at the given index.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L219","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L219","def":{"name":"[]","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(i)"}},{"id":"[]?(i:Int)-instance-method","html_id":"[]?(i:Int)-instance-method","name":"[]?","doc":"Returns the element at the given index.\n\nNegative indices can be used to start counting from the end of the vector.\nReturns `nil` if trying to access an element outside the vector's range.\n\n```\nvec = Immutable::Vector['a', 'b', 'c']\nvec[0]?  # => 'a'\nvec[2]?  # => 'c'\nvec[-1]? # => 'c'\nvec[-2]? # => 'b'\n\nvec[3]?  # nil\nvec[-4]? # nil\n```","summary":"<p>Returns the element at the given index.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L238","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L238","def":{"name":"[]?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(i) do\n  nil\nend"}},{"id":"any?-instance-method","html_id":"any?-instance-method","name":"any?","doc":"Returns true if the vector contains at least one element, else false","summary":"<p>Returns true if the vector contains at least one element, else false</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L383","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L383","def":{"name":"any?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size != 0"}},{"id":"at(i:Int)-instance-method","html_id":"at(i:Int)-instance-method","name":"at","doc":"Returns the element at the given index, if in bounds,\notherwise raises `IndexError`\n\n```\nv = Immutable::Vector[:foo, :bar]\nv.at(0) { :baz } # => :foo\nv.at(2) { :baz } # => IndexError\n```","summary":"<p>Returns the element at the given index, if in bounds, otherwise raises <code>IndexError</code></p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L250","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L250","def":{"name":"at","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(i) do\n  raise(IndexError.new)\nend"}},{"id":"at(i:Int,&block)-instance-method","html_id":"at(i:Int,&amp;block)-instance-method","name":"at","doc":"Returns the element at the given index, if in bounds,\notherwise executes the given block and returns its value.\n\n```\nv = Immutable::Vector[:foo, :bar]\nv.at(0) { :baz } # => :foo\nv.at(2) { :baz } # => :baz\n```","summary":"<p>Returns the element at the given index, if in bounds, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int, &block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L262","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L262","def":{"name":"at","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if i < 0\n  i = size + i\nend\nif i < 0 || i >= size\n  return yield\nend\nif in_tail?(i)\n  return @tail[i - @trie.size]\nend\n@trie.get(i)\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Returns an `Iterator` for the elements of this vector.\n\n```\nv = Immutable::Vector[\"a\", \"b\", \"c\"]\niter = v.each\niter.next # => \"a\"\niter.next # => \"b\"\n```","summary":"<p>Returns an <code>Iterator</code> for the elements of this vector.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L131","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L131","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.each.chain(@tail.each)"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"Calls the given block once for each element in this vector, passing that\nelement as a parameter.\n\n```\nv = Immutable::Vector[\"a\", \"b\", \"c\"]\nv.each { |x| print x, \" -- \" }\n```\n\nproduces:\n\n```text\na -- b -- c --\n```","summary":"<p>Calls the given block once for each element in this vector, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L117","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L117","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.each do |elem|\n  yield elem\nend\n@tail.each do |elem|\n  yield elem\nend\nself\n"}},{"id":"each_index(&block)-instance-method","html_id":"each_index(&amp;block)-instance-method","name":"each_index","doc":"Calls the given block once for each index in this vector, passing that\nindex as a parameter.\n\n```\nv = Immutable::Vector[\"a\", \"b\", \"c\"]\nv.each_index { |x| print x, \" -- \" }\n```\n\nproduces:\n\n```text\n0 -- 1 -- 2 --\n```","summary":"<p>Calls the given block once for each index in this vector, passing that index as a parameter.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L148","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L148","def":{"name":"each_index","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"i = 0\nwhile i < size\n  yield i\n  i = i + 1\nend\nself\n"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"Returns true if the vector is empty, else false","summary":"<p>Returns true if the vector is empty, else false</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L378","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L378","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size == 0"}},{"id":"equals?(other:Vector,&block)-instance-method","html_id":"equals?(other:Vector,&amp;block)-instance-method","name":"equals?","doc":"Determines if this vector equals *other* according to a comparison\ndone by the given block.\n\nIf this vector's size is the same as *other*'s size, this method yields\nelements from this vector and *other* in tandem: if the block returns true\nfor all of them, this method returns `true`. Otherwise it returns `false`.\n\n```\na = Immutable::Vector[1, 2, 3]\nb = Immutable::Vector[\"a\", \"ab\", \"abc\"]\na.equals?(b) { |x, y| x == y.size } # => true\na.equals?(b) { |x, y| x == y }      # => false\n```","summary":"<p>Determines if this vector equals <em>other</em> according to a comparison done by the given block.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"args_string":"(other : Vector, &block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L327","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L327","def":{"name":"equals?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"if size != other.size\n  return false\nend\n(each.zip(other.each)).all? do |tuple|\n  yield tuple.first, tuple.last\nend\n"}},{"id":"first-instance-method","html_id":"first-instance-method","name":"first","doc":"Returns the first element in the vector, if not empty, else raises\n`IndexError`","summary":"<p>Returns the first element in the vector, if not empty, else raises <code>IndexError</code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L294","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L294","def":{"name":"first","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[0]"}},{"id":"first?-instance-method","html_id":"first?-instance-method","name":"first?","doc":"Returns the first element in the vector, if not empty, else nil","summary":"<p>Returns the first element in the vector, if not empty, else nil</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L299","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L299","def":{"name":"first?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[0]?"}},{"id":"hash-instance-method","html_id":"hash-instance-method","name":"hash","doc":"Returns a hash code based on this vector's size and elements.\n\nSee `Object#hash`.","summary":"<p>Returns a hash code based on this vector's size and elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L509","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L509","def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reduce(41 * size) do |memo, elem|\n  (41 * memo) + elem.hash\nend"}},{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends a `String` representation of this object to the given IO object.","summary":"<p>Appends a <code>String</code> representation of this object to the given IO object.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L502","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L502","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s(io)"}},{"id":"last-instance-method","html_id":"last-instance-method","name":"last","doc":"Returns the last element in the vector, if not empty, else raises\n`IndexError`","summary":"<p>Returns the last element in the vector, if not empty, else raises <code>IndexError</code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L305","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L305","def":{"name":"last","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[-1]"}},{"id":"last?-instance-method","html_id":"last?-instance-method","name":"last?","doc":"Returns the last element in the vector, if not empty, else nil","summary":"<p>Returns the last element in the vector, if not empty, else nil</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L310","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L310","def":{"name":"last?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[-1]?"}},{"id":"pop:Tuple(T,Immutable::Vector(T))-instance-method","html_id":"pop:Tuple(T,Immutable::Vector(T))-instance-method","name":"pop","doc":"Return a tuple of two things: the last element of the vector and a copy of\nthe vector with the last element removed. Raises `IndexError` if the\nvector is empty.\n\n```\nv = Immutable::Vector[1, 2, 3, 4]\nlast, v2 = v.pop\nlast # => 4\nv2   # => Vector [1, 2, 3]\n```","summary":"<p>Return a tuple of two things: the last element of the vector and a copy of the vector with the last element removed.</p>","abstract":false,"args":[],"args_string":" : Tuple(T, Immutable::Vector(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L187","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L187","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(T, Vector(T))","visibility":"Public","body":"vec = drop_last do\n  raise(IndexError.new(\"cannot pop empty vector\"))\nend\n{last, vec}\n"}},{"id":"pop?:Tuple(T?,Immutable::Vector(T))-instance-method","html_id":"pop?:Tuple(T?,Immutable::Vector(T))-instance-method","name":"pop?","doc":"Like `pop`, but returns a tuple of nil and empty vector if called on an\nempty vector","summary":"<p>Like <code><a href=\"../Immutable/Vector.html#pop%3ATuple%28T%2CImmutable%3A%3AVector%28T%29%29-instance-method\">#pop</a></code>, but returns a tuple of nil and empty vector if called on an empty vector</p>","abstract":false,"args":[],"args_string":" : Tuple(T?, Immutable::Vector(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L194","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L194","def":{"name":"pop?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(T | ::Nil, Vector(T))","visibility":"Public","body":"vec = drop_last do\n  self\nend\n{last?, vec}\n"}},{"id":"push(elem:T)-instance-method","html_id":"push(elem:T)-instance-method","name":"push","doc":"Returns a new vector with the given value appended to the end, given that the type of\nthe value is T (which might be a type or a union of types).\n\n```\nv = Immutable::Vector[\"a\", \"b\"]\nv.push(\"c\") # => Vector [\"a\", \"b\", \"c\"]\nv.push(1)   # => Errors, because the vector only accepts String\n\n# The original vector remains unchanged:\nv           # => Vector [\"a\", \"b\"]\n```","summary":"<p>Returns a new vector with the given value appended to the end, given that the type of the value is T (which might be a type or a union of types).</p>","abstract":false,"args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"args_string":"(elem : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L168","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L168","def":{"name":"push","args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_tail = @tail + [elem]\nif new_tail.size == Trie::BLOCK_SIZE\n  Vector.new(@trie.push_leaf(new_tail), [] of T)\nelse\n  Vector.new(@trie, new_tail)\nend\n"}},{"id":"set(i:Int,value:T)-instance-method","html_id":"set(i:Int,value:T)-instance-method","name":"set","doc":"Returns a modified copy of the vector with the element at the given index\nset to the given value.\n\nNegative indices can be used to start counting from the end of the vector.\nRaises `IndexError` if trying to set an element outside the vector's range.\n\n```\nvec = Immutable::Vector[1, 2, 3]\nvec.set(0, 5) # Vector [5, 2, 3]\nvec           # Vector [1, 2, 3]\n\nvec.set(3, 5) # => IndexError\n```","summary":"<p>Returns a modified copy of the vector with the element at the given index set to the given value.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(i : Int, value : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L282","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L282","def":{"name":"set","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if i < 0\n  i = size + i\nend\nif i < 0 || i >= size\n  raise(IndexError.new)\nend\nif in_tail?(i)\n  new_tail = @tail.dup.tap do |t|\n    t[i - @trie.size] = value\n  end\n  return Vector.new(@trie, new_tail)\nend\nVector.new(@trie.update(i, value), @tail)\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the vector","summary":"<p>Returns the number of elements in the vector</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L100","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L100","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.size + @tail.size"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":"Appends a JSON string representation of this vector to the given\nio object","summary":"<p>Appends a JSON string representation of this vector to the given io object</p>","abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L495","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L495","def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.array do\n  each(&.to_json(json))\nend"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a String representation of this vector\nto the given IO object.","summary":"<p>Appends a String representation of this vector to the given IO object.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L488","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L488","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"Vector \"\nto_a.to_s(io)\n"}},{"id":"transient(&block)-instance-method","html_id":"transient(&amp;block)-instance-method","name":"transient","doc":"Executes the given block passing a transient version of the vector, then\nconverts the transient vector back to an immutable one and returns it.\n\nThis is useful to perform several updates on a vector in an efficient way:\nas the transient vector supports the same API of vector, but performs\nupdates in place, avoiding unnecessary object allocations.\n\n```\nvec = Immutable::Vector(Int32).new\nv2 = vec.transient do |v|\n  100.times { |i| v = v.push(i) }\nend\nv2.size # => 100\n```\n\nNote that, as the transient is mutable, it is not thread-safe.","summary":"<p>Executes the given block passing a transient version of the vector, then converts the transient vector back to an immutable one and returns it.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L93","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L93","def":{"name":"transient","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"t = Transient.new(@trie, @tail.dup)\nyield t\nt.persist!\n"}},{"id":"uniq-instance-method","html_id":"uniq-instance-method","name":"uniq","doc":"Returns a new vector by removing duplicate values in self.\n\n```\nv = Immutable::Vector[\"a\", \"a\", \"b\", \"b\", \"c\"]\nv.uniq # => Vector [\"a\", \"b\", \"c\"]\nv      # => Vector [\"a\", \"a\", \"b\", \"b\", \"c\"]\n```","summary":"<p>Returns a new vector by removing duplicate values in self.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L476","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L476","def":{"name":"uniq","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hash = {} of T => Bool\nelems = reject do |elem|\n  if in_hash = hash.has_key?(elem)\n    next true\n  end\n  hash[elem] = true\n  in_hash\nend\nVector(T).new(elems)\n"}},{"id":"|(other:Immutable::Vector(U))forallU-instance-method","html_id":"|(other:Immutable::Vector(U))forallU-instance-method","name":"|","doc":"Set union: returns a new vector by joining self with other, excluding\nany duplicates and preserving the order from the original vector.\n\n```\nv1 = Immutable::Vector[\"a\", \"b\", \"c\"]\nv2 = Immutable::Vector[\"c\", \"d\", \"a\"]\nv1 | v2 # => Vector [1, 3] # => Vector [\"a\", \"b\", \"c\", \"d\"]\n```","summary":"<p>Set union: returns a new vector by joining self with other, excluding any duplicates and preserving the order from the original vector.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(U)"}],"args_string":"(other : Immutable::Vector(U)) forall U","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L454","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L454","def":{"name":"|","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vector(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = Set(T | U).new\nunion = reduce([] of T | U) do |union, elem|\n  if set.includes?(elem)\n  else\n    union << elem\n  end\n  set.add(elem)\n  union\nend\nunion = other.reduce(union) do |union, elem|\n  if set.includes?(elem)\n  else\n    union << elem\n  end\n  set.add(elem)\n  union\nend\nVector(T | U).new(union)\n"}}],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Vector/Transient","path":"Immutable/Vector/Transient.html","kind":"class","full_name":"Immutable::Vector::Transient(T)","name":"Transient","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Immutable/Vector","kind":"class","full_name":"Immutable::Vector","name":"Vector"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Immutable/Vector","kind":"class","full_name":"Immutable::Vector","name":"Vector"},{"html_id":"github.com/lucaong/immutable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/lucaong/immutable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/vector.cr","line_number":539,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Vector","kind":"class","full_name":"Immutable::Vector(T)","name":"Vector"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(trie:Immutable::Vector::Trie(T),tail:Array(T))-class-method","html_id":"new(trie:Immutable::Vector::Trie(T),tail:Array(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"trie","doc":null,"default_value":"","external_name":"trie","restriction":"Trie(T)"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"Array(T)"}],"args_string":"(trie : Immutable::Vector::Trie(T), tail : Array(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L542","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L542","def":{"name":"new","args":[{"name":"trie","doc":null,"default_value":"","external_name":"trie","restriction":"Trie(T)"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Transient(T).allocate\n_.initialize(trie, tail)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(elems:Array(T))-class-method","html_id":"new(elems:Array(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"args_string":"(elems : Array(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L552","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L552","def":{"name":"new","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Transient(T).allocate\n_.initialize(elems)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L546","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L546","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Transient(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"persist!-instance-method","html_id":"persist!-instance-method","name":"persist!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L559","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L559","def":{"name":"persist!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trie.clear_owner!\n@valid = false\nVector.new(@trie, @tail.dup)\n"}},{"id":"pop:Tuple(T,Immutable::Vector::Transient(T))-instance-method","html_id":"pop:Tuple(T,Immutable::Vector::Transient(T))-instance-method","name":"pop","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(T, Immutable::Vector::Transient(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L575","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L575","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(T, Transient(T))","visibility":"Public","body":"check_validity!\nif empty?\n  raise(IndexError.new(\"cannot pop empty vector\"))\nend\n{last, drop_last do\n  self\nend}\n"}},{"id":"pop?:Tuple(T?,Immutable::Vector::Transient(T))-instance-method","html_id":"pop?:Tuple(T?,Immutable::Vector::Transient(T))-instance-method","name":"pop?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(T?, Immutable::Vector::Transient(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L581","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L581","def":{"name":"pop?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(T | ::Nil, Transient(T))","visibility":"Public","body":"check_validity!\n{last?, drop_last do\n  self\nend}\n"}},{"id":"push(elem:T)-instance-method","html_id":"push(elem:T)-instance-method","name":"push","doc":null,"summary":null,"abstract":false,"args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"args_string":"(elem : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L565","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L565","def":{"name":"push","args":[{"name":"elem","doc":null,"default_value":"","external_name":"elem","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\n@tail << elem\nif @tail.size == Trie::BLOCK_SIZE\n  @trie = @trie.push_leaf!(@tail, object_id)\n  @tail = Array(T).new(Trie::BLOCK_SIZE)\nend\nself\n"}},{"id":"set(i:Int,value:T)-instance-method","html_id":"set(i:Int,value:T)-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(i : Int, value : T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L586","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr#L586","def":{"name":"set","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_validity!\nif i < 0\n  i = size + i\nend\nif i < 0 || i >= size\n  raise(IndexError.new)\nend\nif in_tail?(i)\n  @tail[i - @trie.size] = value\nelse\n  @trie = @trie.update!(i, value, object_id)\nend\nself\n"}}],"macros":[],"types":[{"html_id":"github.com/lucaong/immutable/Immutable/Vector/Transient/Invalid","path":"Immutable/Vector/Transient/Invalid.html","kind":"class","full_name":"Immutable::Vector::Transient::Invalid","name":"Invalid","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/vector.cr","line_number":615,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Vector/Transient","kind":"class","full_name":"Immutable::Vector::Transient(T)","name":"Transient"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/lucaong/immutable/Immutable/Vector/Trie","path":"Immutable/Vector/Trie.html","kind":"class","full_name":"Immutable::Vector::Trie(T)","name":"Trie","abstract":false,"superclass":{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/lucaong/immutable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/lucaong/immutable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"immutable/vector/trie.cr","line_number":3,"url":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr"}],"repository_name":"github.com/lucaong/immutable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"BITS_PER_LEVEL","name":"BITS_PER_LEVEL","value":"5_u32","doc":null,"summary":null},{"id":"BLOCK_SIZE","name":"BLOCK_SIZE","value":"(2 ** BITS_PER_LEVEL).to_u32","doc":null,"summary":null},{"id":"INDEX_MASK","name":"INDEX_MASK","value":"BLOCK_SIZE - 1","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/lucaong/immutable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/lucaong/immutable/Immutable/Vector","kind":"class","full_name":"Immutable::Vector(T)","name":"Vector"},"doc":null,"summary":null,"class_methods":[{"id":"empty(owner:UInt64?=nil)-class-method","html_id":"empty(owner:UInt64?=nil)-class-method","name":"empty","doc":null,"summary":null,"abstract":false,"args":[{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"args_string":"(owner : UInt64? = <span class=\"n\">nil</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L149","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L149","def":{"name":"empty","args":[{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Trie.new([] of T, owner)"}},{"id":"from(elems:Array(T),owner:UInt64)-class-method","html_id":"from(elems:Array(T),owner:UInt64)-class-method","name":"from","doc":null,"summary":null,"abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"},{"name":"owner","doc":null,"default_value":"","external_name":"owner","restriction":"UInt64"}],"args_string":"(elems : Array(T), owner : UInt64)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L161","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L161","def":{"name":"from","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"},{"name":"owner","doc":null,"default_value":"","external_name":"owner","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"trie = Trie(T).empty(owner)\nelems.each_slice(BLOCK_SIZE) do |leaf|\n  trie = trie.push_leaf!(leaf, owner)\nend\ntrie\n"}},{"id":"from(elems:Array(T))-class-method","html_id":"from(elems:Array(T))-class-method","name":"from","doc":null,"summary":null,"abstract":false,"args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"args_string":"(elems : Array(T))","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L153","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L153","def":{"name":"from","args":[{"name":"elems","doc":null,"default_value":"","external_name":"elems","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"trie = Trie(T).empty\nelems.each_slice(BLOCK_SIZE) do |leaf|\n  trie = trie.push_leaf(leaf)\nend\ntrie\n"}}],"constructors":[{"id":"new(children:Array(Immutable::Vector::Trie(T)),levels:Int32,owner:UInt64?=nil)-class-method","html_id":"new(children:Array(Immutable::Vector::Trie(T)),levels:Int32,owner:UInt64?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":"Array(Trie(T))"},{"name":"levels","doc":null,"default_value":"","external_name":"levels","restriction":"Int32"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"args_string":"(children : Array(Immutable::Vector::Trie(T)), levels : Int32, owner : UInt64? = <span class=\"n\">nil</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L18","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L18","def":{"name":"new","args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":"Array(Trie(T))"},{"name":"levels","doc":null,"default_value":"","external_name":"levels","restriction":"Int32"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Trie(T).allocate\n_.initialize(children, levels, owner)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(values:Array(T),owner:UInt64?=nil)-class-method","html_id":"new(values:Array(T),owner:UInt64?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(T)"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"args_string":"(values : Array(T), owner : UInt64? = <span class=\"n\">nil</span>)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L23","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L23","def":{"name":"new","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(T)"},{"name":"owner","doc":null,"default_value":"nil","external_name":"owner","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Trie(T).allocate\n_.initialize(values, owner)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"at(index:Int,&block)-instance-method","html_id":"at(index:Int,&amp;block)-instance-method","name":"at","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int, &block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L29","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L29","def":{"name":"at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if index < 0 || index >= size\n  return yield\nend\nlookup(index)\n"}},{"id":"clear_owner!-instance-method","html_id":"clear_owner!-instance-method","name":"clear_owner!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L144","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L144","def":{"name":"clear_owner!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@owner = nil\nself\n"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L48","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L48","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"i = 0\nwhile i < size\n  leaf_values = (leaf_for(i)).values\n  leaf_values.each do |value|\n    yield value\n    i = i + 1\n  end\nend\nself\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L60","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L60","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"FlattenLeaves.new(((0...size).step(BLOCK_SIZE)).map do |i|\n  (leaf_for(i)).values.each.as(Iterator(T))\nend)"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L131","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L131","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0"}},{"id":"get(index:Int)-instance-method","html_id":"get(index:Int)-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L34","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L34","def":{"name":"get","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(index) do\n  raise(IndexError.new)\nend"}},{"id":"inspect-instance-method","html_id":"inspect-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L139","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L139","def":{"name":"inspect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if leaf?\n  return @values.inspect\nend\n\"[#{@children.map do |c|\n  c.inspect\nend.join(\", \")}]\"\n"}},{"id":"last-instance-method","html_id":"last-instance-method","name":"last","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L123","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L123","def":{"name":"last","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"get(size - 1)"}},{"id":"last_leaf-instance-method","html_id":"last_leaf-instance-method","name":"last_leaf","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L127","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L127","def":{"name":"last_leaf","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(leaf_for(@size - 1)).values"}},{"id":"leaf?-instance-method","html_id":"leaf?-instance-method","name":"leaf?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L135","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L135","def":{"name":"leaf?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@levels == 0"}},{"id":"levels-instance-method","html_id":"levels-instance-method","name":"levels","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L10","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L10","def":{"name":"levels","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@levels"}},{"id":"pop_leaf(from:UInt64?=nil):Immutable::Vector::Trie(T)-instance-method","html_id":"pop_leaf(from:UInt64?=nil):Immutable::Vector::Trie(T)-instance-method","name":"pop_leaf","doc":null,"summary":null,"abstract":false,"args":[{"name":"from","doc":null,"default_value":"nil","external_name":"from","restriction":"UInt64 | ::Nil"}],"args_string":"(from : UInt64? = <span class=\"n\">nil</span>) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L99","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L99","def":{"name":"pop_leaf","args":[{"name":"from","doc":null,"default_value":"nil","external_name":"from","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if empty? || ((size % 32) != 0)\n  raise(ArgumentError.new)\nend\nif leaf?\n  return Trie.new([] of T, from)\nend\nchild = @children.last.pop_leaf\nif child.empty?\n  if @children.size == 2\n    return @children.first\n  end\n  return Trie.new(@children[0...-1], @levels, from)\nend\nTrie.new(@children[0...-1].push(child), @levels, from)\n"}},{"id":"pop_leaf!(from:UInt64):Immutable::Vector::Trie(T)-instance-method","html_id":"pop_leaf!(from:UInt64):Immutable::Vector::Trie(T)-instance-method","name":"pop_leaf!","doc":null,"summary":null,"abstract":false,"args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"args_string":"(from : UInt64) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L110","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L110","def":{"name":"pop_leaf!","args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if empty? || ((size % 32) != 0)\n  raise(ArgumentError.new)\nend\nif from == @owner\nelse\n  return pop_leaf(from)\nend\nif leaf?\n  return Trie.new([] of T, from)\nend\n@children[-1] = @children[-1].pop_leaf!(from)\nif @children[-1].empty?\n  if @children.size == 2\n    return @children.first\n  end\n  @children.pop\nend\n@size = calculate_size\nself\n"}},{"id":"push_leaf(leaf:Array(T),from:UInt64?=nil):Immutable::Vector::Trie(T)-instance-method","html_id":"push_leaf(leaf:Array(T),from:UInt64?=nil):Immutable::Vector::Trie(T)-instance-method","name":"push_leaf","doc":null,"summary":null,"abstract":false,"args":[{"name":"leaf","doc":null,"default_value":"","external_name":"leaf","restriction":"Array(T)"},{"name":"from","doc":null,"default_value":"nil","external_name":"from","restriction":"UInt64 | ::Nil"}],"args_string":"(leaf : Array(T), from : UInt64? = <span class=\"n\">nil</span>) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L66","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L66","def":{"name":"push_leaf","args":[{"name":"leaf","doc":null,"default_value":"","external_name":"leaf","restriction":"Array(T)"},{"name":"from","doc":null,"default_value":"nil","external_name":"from","restriction":"UInt64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if leaf.size > BLOCK_SIZE || ((size % 32) != 0)\n  raise(ArgumentError.new)\nend\nif full?\n  return (Trie.new([self], @levels + 1, from)).push_leaf(leaf, from)\nend\nif empty? && leaf?\n  return Trie.new(leaf, from)\nend\nTrie.new(@children.dup.tap do |cs|\n  if @levels == 1\n    cs.push(Trie.new(leaf))\n  else\n    if cs.empty? || cs.last.full?\n      cs << (Trie.new([] of Trie(T), @levels - 1))\n    end\n    cs[-1] = cs[-1].push_leaf(leaf, from)\n  end\nend, @levels, from)\n"}},{"id":"push_leaf!(leaf:Array(T),from:UInt64):Immutable::Vector::Trie(T)-instance-method","html_id":"push_leaf!(leaf:Array(T),from:UInt64):Immutable::Vector::Trie(T)-instance-method","name":"push_leaf!","doc":null,"summary":null,"abstract":false,"args":[{"name":"leaf","doc":null,"default_value":"","external_name":"leaf","restriction":"Array(T)"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"args_string":"(leaf : Array(T), from : UInt64) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L82","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L82","def":{"name":"push_leaf!","args":[{"name":"leaf","doc":null,"default_value":"","external_name":"leaf","restriction":"Array(T)"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if leaf.size > BLOCK_SIZE || ((size % 32) != 0)\n  raise(ArgumentError.new)\nend\nif from == @owner\nelse\n  return push_leaf(leaf, from)\nend\nif full?\n  return (Trie.new([self], @levels + 1, from)).push_leaf!(leaf, from)\nend\nif empty? && leaf?\n  return Trie.new(leaf, @owner)\nend\nif @levels == 1\n  @children.push(Trie.new(leaf, from))\nelse\n  if @children.empty? || @children.last.full?\n    @children << (Trie.new([] of Trie(T), @levels - 1, from))\n  end\n  @children[-1] = @children[-1].push_leaf!(leaf, from)\nend\n@size = calculate_size\nself\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L10","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L10","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size"}},{"id":"update(index:Int,value:T):Immutable::Vector::Trie(T)-instance-method","html_id":"update(index:Int,value:T):Immutable::Vector::Trie(T)-instance-method","name":"update","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(index : Int, value : T) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L38","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L38","def":{"name":"update","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if index < 0 || index >= size\n  raise(IndexError.new)\nend\nset(index, value)\n"}},{"id":"update!(index:Int,value:T,from:UInt64):Immutable::Vector::Trie(T)-instance-method","html_id":"update!(index:Int,value:T,from:UInt64):Immutable::Vector::Trie(T)-instance-method","name":"update!","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"args_string":"(index : Int, value : T, from : UInt64) : Immutable::Vector::Trie(T)","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L43","source_link":"https://github.com/lucaong/immutable/blob/93563f08f8f7503bd8244230276fb8f7587e83e2/src/immutable/vector/trie.cr#L43","def":{"name":"update!","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trie(T)","visibility":"Public","body":"if index < 0 || index >= size\n  raise(IndexError.new)\nend\nset!(index, value, from)\n"}}],"macros":[],"types":[]}]}]}]}})